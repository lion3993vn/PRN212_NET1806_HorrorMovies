// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Entities;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(HorrorMoviesContext))]
    [Migration("20240725153446_dbInit")]
    partial class dbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Entities.CriticReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("reviewId");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creationDate");

                    b.Property<string>("CriticName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("criticName");

                    b.Property<bool?>("IsTopCritic")
                        .HasColumnType("bit")
                        .HasColumnName("isTopCritic");

                    b.Property<string>("MovieId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("movieId");

                    b.Property<string>("PublicationName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("publicationName");

                    b.Property<string>("Quote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("quote");

                    b.Property<string>("ReviewUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviewUrl");

                    b.Property<string>("ScoreSentiment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("scoreSentiment");

                    b.HasKey("ReviewId")
                        .HasName("PK__CriticRe__2ECD6E04F07C4348");

                    b.HasIndex("MovieId");

                    b.ToTable("CriticReview", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Movie", b =>
                {
                    b.Property<string>("MovieId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("movieId");

                    b.Property<int?>("MovieRank")
                        .HasColumnType("int")
                        .HasColumnName("movieRank");

                    b.Property<string>("MovieTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("movieTitle");

                    b.Property<string>("MovieUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("movieURL");

                    b.Property<int?>("MovieYear")
                        .HasColumnType("int")
                        .HasColumnName("movieYear");

                    b.HasKey("MovieId")
                        .HasName("PK__Movies__42EB374EE4BE64C6");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Repositories.Entities.UserReview", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userId");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creationDate");

                    b.Property<bool?>("HasProfanity")
                        .HasColumnType("bit")
                        .HasColumnName("hasProfanity");

                    b.Property<bool?>("HasSpoilers")
                        .HasColumnType("bit")
                        .HasColumnName("hasSpoilers");

                    b.Property<bool?>("IsSuperReviewer")
                        .HasColumnType("bit")
                        .HasColumnName("isSuperReviewer");

                    b.Property<string>("MovieId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("movieId");

                    b.Property<float?>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.HasKey("UserId")
                        .HasName("PK__UserRevi__CB9A1CFF398AAF8A");

                    b.HasIndex("MovieId");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("Repositories.Entities.CriticReview", b =>
                {
                    b.HasOne("Repositories.Entities.Movie", "Movie")
                        .WithMany("CriticReviews")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__CriticRev__movie__3B75D760");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Repositories.Entities.UserReview", b =>
                {
                    b.HasOne("Repositories.Entities.Movie", "Movie")
                        .WithMany("UserReviews")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__UserRevie__movie__38996AB5");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Repositories.Entities.Movie", b =>
                {
                    b.Navigation("CriticReviews");

                    b.Navigation("UserReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
